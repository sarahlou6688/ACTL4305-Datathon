library(tidyverse)
library(lubridate)

#Import data
earned<- read.csv("UNSW_earned_data_adjusted_Sep27.csv")

dim(earned)
summary(earned)


# Convert pet_de_sexed and pet_is_switcher columns from 'true'/'false' (string) to boolean TRUE/FALSE"
earned$pet_de_sexed <- earned$pet_de_sexed == "true"
earned$pet_is_switcher <- earned$pet_is_switcher == "true"


# Remove duplicate rows from 'earned' dataset
earned <- earned %>% distinct() #none detected

# Convert pet_gender to a categorical data type
earned$pet_gender <- factor(earned$pet_gender)


earned$nb_address_type_adj <- factor(earned$nb_address_type_adj)
earned$nb_state <- factor(earned$nb_state)


#UW_data make the month
# Assuming 'myrows' is your dataset and 'UW_date' is the column with dates
earned$UW_Date <- ymd_hms(earned$UW_Date)  # Convert the column to date-time format

# Extract the month name
earned$UW_Date_month <- month(earned$UW_Date, label = TRUE, abbr = FALSE)  # Extract full month name

# Convert 'nb_policy_first_inception_date' to date format without the time
earned$nb_policy_first_inception_date <- as_date(earned$nb_policy_first_inception_date)

# Remove specified columns from the 'earned' dataset
earned <- subset(earned, select = -c(quote_date, quote_time_group, lead_date_day, person_dob))

earned$pet_gender <- factor(earned$pet_gender)
earned$nb_address_type_adj <- factor(earned$nb_address_type_adj)
earned$nb_state <- factor(earned$nb_state)
earned$pet_de_sexed <- as.logical(earned$pet_de_sexed)
earned$pet_is_switcher <- as.logical(earned$pet_is_switcher)


# Display the structure of the dataset to confirm the change
str(earned)

explore1 <- earned %>%
  select(pet_de_sexed, pet_de_sexed_age, nb_breed_name_unique_concat)

explore1$pet_gender<- earned$pet_gender
explore1$pet_age_years<- earned$pet_age_years
explore1 <- explore1 %>%
  filter(pet_de_sexed != FALSE)


table(explore1$pet_de_sexed_age)

not_sure_count <- sum(explore1$pet_de_sexed_age == "Not Sure", na.rm = TRUE)
print(not_sure_count)
true_count <- sum(explore1$pet_de_sexed_age == TRUE, na.rm = TRUE)
print(true_count)
630/12910 #4.88% use breed and duplicate

