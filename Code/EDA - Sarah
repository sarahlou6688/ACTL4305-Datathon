#EDA ----
#feature distributions 
#bar plots conditional on claim 
feature_dist_claim = function(feature) {
  combined_data %>% 
    filter(!is.na(claim_id))  %>%
    ggplot() + 
    geom_bar(mapping = aes(x = !!sym(feature), fill = !!sym(feature)), na.rm = T) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
    labs(title = feature)
}

feature_dist_claim("condition_category")
feature_dist_claim("pet_gender")
feature_dist_claim("pet_de_sexed")
feature_dist_claim("nb_state")
feature_dist_claim("nb_breed_type")

#bar plots not conditional on claim 
feature_dist = function(feature) {
  feature_dist_data = combined_data %>% 
    group_by(!!sym(feature)) %>%
    summarise(proportion_with_claim = sum(claim_flag == "1")/sum(claim_flag %in% c("0", "1"))) 
    ggplot(feature_dist_data, aes(x = !!sym(feature), y = proportion_with_claim, fill = !!sym(feature))) + 
    geom_col() +
    labs(title = feature)
}

feature_dist("pet_gender")
feature_dist("pet_de_sexed")
feature_dist("nb_state")
feature_dist("nb_breed_type")

#check relationship between variables (categorical vs numerical)
feature_rel_cn = function(feature1, feature2) {
  ggplot(combined_data) +
    geom_boxplot(mapping = aes(x = !!sym(feature1), y = !!sym(feature2), fill = !!sym(feature1))) +
    theme(axis.text.x = element_text(angle = 20, hjust = 1), legend.position="none") + 
    ylim(0, 5000) + #this needs to be checked
    labs(title = paste0(feature1, " vs ", feature2)) 
}

feature_rel_cn("condition_category", "total_claim_amount")
feature_rel_cn("pet_gender", "total_claim_amount")
feature_rel_cn("pet_de_sexed", "total_claim_amount")
feature_rel_cn("nb_state", "total_claim_amount")
feature_rel_cn("nb_breed_type", "total_claim_amount")

#check relationship between variables (numerical vs numerical)
feature_rel_nn = function(feature1, feature2) {
  ggplot(combined_data) +
    geom_point(mapping = aes(x = !!sym(feature1), y = !!sym(feature2), color = nb_breed_type)) +
    labs(title = paste0(feature1, " vs ", feature2)) 
}

feature_rel_nn("pet_age_months", "total_claim_amount")


#correlation matrix 
#convert categorical to numerical factors? 
# corr_data  = 
corr_matrix = cor(corr_data, method = "pearson")
